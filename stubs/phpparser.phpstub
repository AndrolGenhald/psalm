<?php declare(strict_types=1);

namespace PhpParser\Node\Expr {
    use PhpParser\Node\Arg;
    use PhpParser\Node\Expr;
    use PhpParser\Node\Name;
    use PhpParser\Node\Stmt;
    use PhpParser\Node\VariadicPlaceholder;

    abstract class CallLike extends Expr {
        /**
         * @return list<Arg|VariadicPlaceholder>
         */
        abstract public function getRawArgs(): array;

        public function isFirstClassCallable(): bool {}

        /**
         * @psalm-pure
         * @return list<Arg>
         */
        public function getArgs(): array{}
    }
}

namespace PhpParser\Node\Stmt {
    use PhpParser\Node;
    use PhpParser\Node\Expr;

    class Catch_ extends Node\Stmt
    {
        /** @var non-empty-list<Node\Name> Types of exceptions to catch */
        public $types;
        /** @var Expr\Variable|null Variable for exception */
        public $var;
        /** @var list<Node\Stmt> Statements */
        public $stmts;

        /**
         * Constructs a catch node.
         *
         * @param non-empty-list<Name>  $types      Types of exceptions to catch
         * @param Expr\Variable|null    $var        Variable for exception
         * @param list<Stmt>            $stmts      Statements
         * @param array                 $attributes Additional attributes
         */
        public function __construct(
            array $types, Expr\Variable $var = null, array $stmts = [], array $attributes = []
        ) {}

        /** @return list<string> */
        public function getSubNodeNames() : array {}
    }
}
